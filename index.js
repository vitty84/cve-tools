/**
 * @fileOverview Main programmatic interface.
 */

// NPM.
var async = require('async');
var _ = require('lodash');

// Local.
var nvdFeed = require('./lib/nvdFeed');
var parser = require('./lib/parser');

/**
 * Obtain an array of CVE data.
 *
 * @param {String[]} cveIds CVE IDs.
 * @param {Function} callback Of the form function (error, object[]).
 */
exports.dataForCveIds = function (cveIds, callback) {
  async.mapSeries(cveIds, function (cveId, asyncCallback) {
    nvdFeed.getDataForCveId(cveId, asyncCallback);
  }, callback);
};

/**
 * Given a path to a file containing CVE IDs, produce data from that.
 *
 * @param {String} filePath Path to a file containing CVE IDs.
 * @param {Function} callback Of the form function (error, object[]).
 */
exports.dataFromFile = function (filePath, callback) {
  exports.dataForCveIds(parser.fromFile(filePath), callback);
};

/**
 * Given a string containing CVE IDs, produce data from that.
 *
 * @param {String} str A string.
 * @param {Function} callback Of the form function (error, object[]).
 */
exports.dataFromString = function (str, callback) {
  exports.dataForCveIds(parser.fromString(str), callback);
};

/**
 * Convert the results array obtained for CVE IDs into a CSV string.
 *
 * @param {Object[]} data Data obtained.
 * @return {String} The CSV output.
 */
exports.dataToCsvString = function (data) {
  var lines = [
    '"CVE ID","CVSS","URL","Summary"'
  ];

  function csvize (str) {
    if (!str) {
      return '""';
    }

    // The second replace regexp is a devious way of getting rid of all line
    // break type whitespace.
    return '"' + str.replace(/"/g, '""').replace(/((?!.)\s)+/g, ' ') + '"'
  }

  _.each(data, function (item) {
    lines.push(_.map([
      item.id,
      item.cvss,
      item.url,
      item.summary
    ], csvize).join(','));
  });

  return lines.join('\n');
};
