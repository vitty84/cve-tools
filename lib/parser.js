/**
 * @fileOverview Parsing CVEs from input.
 */

// Core.
var path = require('path');

// NPM.
var fs = require('fs-extra');
var _ = require('lodash');

/**
 * Parse CVE IDs from a string.
 *
 * @param {String} str String containing CVE IDs.
 * @return {String[]} CVE IDs.
 */
exports.fromString = function (str) {
  var cveRe = /\b(CVE\-\d+-\d+)\b/ig;
  var match;
  var cveIds = [];

  while (match = cveRe.exec(str)) {
    cveIds.push(match[1].toUpperCase());
  }

  return _.uniq(cveIds).sort();
};

/**
 * Given a path to a text file, extract CVE IDs from the contents.
 *
 * @param {String} filepath Path to the file, either absolute or relative to the
 *   current process.cwd() path.
 * @param {String} [encoding] Defaults to 'utf-8'.
 * @return {String[]} CVE IDs.
 */
exports.fromFile = function (filepath, encoding) {
  // Check to see if this is a relative path.
  if (path.resolve(filepath) !== path.normalize(filepath)) {
    filepath = path.resolve(process.cwd(), filepath);
  }

  encoding = encoding || 'utf-8';

  var contents = fs.readFileSync(filepath, { encoding: encoding });
  return exports.fromString(contents)
};
