/**
 * @fileOverview Tests for index.js.
 */


// Local.
var index = require('../index');
var nvdFeed = require('../lib/nvdFeed');
var parser = require('../lib/parser');

describe('index', function () {
  var cveIds;
  var cveData;
  var sandbox;

  beforeEach(function () {
    sandbox = sinon.sandbox.create();

    cveIds = [
      'CVE-2002-1432'
    ];
    cveData = {};
  });

  afterEach(function () {
    sandbox.restore();
  });

  describe('dataForCveIds', function () {

    beforeEach(function () {
      sandbox.stub(nvdFeed, 'getDataForCveId').yields(null, cveData);
    });

    it('functions as expected', function (done) {
      index.dataForCveIds(cveIds, function (error, data) {
        expect(data).to.eql([cveData]);

        sinon.assert.callCount(nvdFeed.getDataForCveId, 1);
        sinon.assert.calledWith(
          nvdFeed.getDataForCveId,
          cveIds[0],
          sinon.match.func
        );

        done(error);
      });
    });
  });

  describe('dataFromFile', function () {
    var data;

    beforeEach(function () {
      data = '';

      sandbox.stub(parser, 'fromFile').returns(cveIds);
      sandbox.stub(index, 'dataForCveIds').yields(null, [cveData]);
    });

    it('functions as expected', function (done) {
      index.dataFromFile(data, function (error, results) {
        expect(results).to.eql([cveData]);

        sinon.assert.calledWith(
          parser.fromFile,
          data
        );
        sinon.assert.calledWith(
          index.dataForCveIds,
          cveIds,
          sinon.match.func
        );

        done(error);
      });
    });
  });

  describe('dataFromString', function () {
    var data;

    beforeEach(function () {
      data = '';

      sandbox.stub(parser, 'fromString').returns(cveIds);
      sandbox.stub(index, 'dataForCveIds').yields(null, [cveData]);
    });

    it('functions as expected', function (done) {
      index.dataFromString(data, function (error, results) {
        expect(results).to.eql([cveData]);

        sinon.assert.calledWith(
          parser.fromString,
          data
        );
        sinon.assert.calledWith(
          index.dataForCveIds,
          cveIds,
          sinon.match.func
        );

        done(error);
      });
    });
  });

  describe('dataToCsvString', function () {
    var data;

    beforeEach(function () {
      data = [
        {
          id: 'CVE-2002-1432',
          cvss: '7.5',
          url: 'https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2002-1432',
          summary: 'CVE-2002-1432 "summary"',
          raw: {}
        },
        {
          id: 'CVE-2002-1433',
          cvss: '5.0',
          url: 'https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2002-1433',
          summary: 'CVE-2002-1433\nsummary',
          raw: {}
        }
      ];
    });

    it('functions as expected', function () {
      expect(index.dataToCsvString(data)).to.equal([
        '"CVE ID","CVSS","URL","Summary"',
        '"CVE-2002-1432","7.5","https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2002-1432","CVE-2002-1432 ""summary"""',
        '"CVE-2002-1433","5.0","https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2002-1433","CVE-2002-1433 summary"'
      ].join('\n'));
    });
  });

});
